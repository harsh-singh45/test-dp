import os
import datetime
from fastapi import APIRouter, Depends, HTTPException
from fastapi.responses import FileResponse
from sqlalchemy.orm import Session
from typing import List
import pandas as pd
from fpdf import FPDF

from core.database import get_db
from models import data_models
from schemas import data_schemas

router = APIRouter()

REPORTS_DIR = "generated_reports"
os.makedirs(REPORTS_DIR, exist_ok=True)


# --- PDF Generation Class and Helpers ---

class ReportPDF(FPDF):
    def header(self):
        # This function is called automatically for each new page.
        self.set_font('DejaVu', 'B', 10)
        self.set_text_color(150, 150, 150)
        self.cell(0, 10, 'Intelation', 0, False, 'L')
        # Draw a line below the header
        self.set_line_width(0.3)
        self.set_draw_color(220, 220, 220)
        self.line(15, 25, self.w - 15, 25)
        # Add space after the line
        self.ln(15)

    def footer(self):
        # This function is called automatically at the bottom of each page.
        self.set_y(-15)
        self.set_font('Helvetica', 'I', 8)
        self.set_text_color(128)
        self.cell(0, 10, f'Page {self.page_no()}', 0, 0, 'C')
        self.cell(0, 10, 'Confidential | Generated by Privacy Budget System', 0, 0, 'R')

    def section_title(self, title):
        self.set_font('DejaVu', 'B', 16)
        self.set_text_color(0)
        self.set_fill_color(240, 240, 240)
        self.cell(0, 12, title, 0, 1, 'L', fill=True)
        self.ln(5)

    def section_explanation(self, text):
        self.set_font('DejaVu', '', 10)
        self.set_text_color(80, 80, 80)
        self.multi_cell(0, 5, text)
        self.ln(6)

    def draw_table(self, header, data, column_widths):
        self.set_font('DejaVu', 'B', 10)
        self.set_fill_color(102, 16, 242)
        self.set_text_color(255)
        for i, header_text in enumerate(header):
            self.cell(column_widths[i], 10, header_text, 1, 0, 'C', 1)
        self.ln()

        self.set_font('DejaVu', '', 9)
        self.set_text_color(0)
        fill = False
        for row in data:
            self.set_fill_color(245, 245, 245) if fill else self.set_fill_color(255)
            for i, datum in enumerate(row):
                align = 'L' if i == 0 else 'C'
                self.cell(column_widths[i], 10, str(datum), 'LR', 0, align, 1)
            self.ln()
            fill = not fill
        self.cell(sum(column_widths), 0, '', 'T') # Draw bottom line of the table
        self.ln()


# --- Main Router Endpoints ---

@router.get("/")
def get_reports(db: Session = Depends(get_db)):
    return db.query(data_models.Report).order_by(data_models.Report.created_at.desc()).all()


@router.post("/")
def generate_report(report_in: data_schemas.ReportCreate, db: Session = Depends(get_db)):
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    safe_name = "".join(c if c.isalnum() else "_" for c in report_in.name)
    file_name = f"{safe_name}_{timestamp}.pdf"
    file_path = os.path.join(REPORTS_DIR, file_name)

    pdf = ReportPDF('P', 'mm', 'A4')
    
    
    # Construct an absolute path to the font file relative to this script's location
    font_path = os.path.join(os.path.dirname(__file__), 'DejaVuSans.ttf')
    
    try:
        pdf.add_font('DejaVu', '', font_path, uni=True)
        pdf.add_font('DejaVu', 'B', font_path, uni=True)
    except RuntimeError:
        raise HTTPException(
            status_code=500, 
            detail="Server Error: DejaVuSans.ttf font not found in the 'routers' directory."
        )

    pdf.add_page()
    pdf.set_font('DejaVu', '', 12)

    # --- Report Header ---
    pdf.set_font('DejaVu', 'B', 20)
    pdf.cell(0, 10, report_in.name, 0, 1, 'C')
    pdf.set_font('DejaVu', '', 9)
    pdf.set_text_color(128)
    generation_date = datetime.datetime.now().strftime("%d %b %Y, %I:%M %p")
    pdf.cell(0, 10, f"Generated on: {generation_date}", 0, 1, 'C')
    pdf.ln(15)

    # --- Report Body ---
    if report_in.type == 'Budget Analysis':
        budgets = db.query(data_models.Budget, data_models.Dataset.name.label("dataset_name"))\
            .join(data_models.Dataset, data_models.Budget.dataset_id == data_models.Dataset.id)\
            .filter(data_models.Budget.dataset_id.in_(report_in.dataset_ids)).all()
        if not budgets:
            raise HTTPException(status_code=404, detail="No budget data found for the selected datasets.")

        pdf.section_title("Budget Analysis")
        pdf.section_explanation(
            "This report provides a detailed breakdown of privacy budget consumption. The 'ε' (Epsilon) and 'δ' (Delta) values quantify the privacy cost. "
            "'Total' is the maximum allocated budget, while 'Consumed' is the amount spent by queries. A higher consumption percentage indicates a greater privacy loss."
        )

        header = ["Dataset Name", "Total ε", "Consumed ε", "% Used", "Total δ", "Consumed δ"]
        data = []
        for budget, name in budgets:
            perc_eps = (budget.consumed_epsilon / budget.total_epsilon * 100) if budget.total_epsilon > 0 else 0
            data.append([
                name,
                f"{budget.total_epsilon:.2f}",
                f"{budget.consumed_epsilon:.4f}",
                f"{perc_eps:.2f}%",
                f"{budget.total_delta:.1e}",
                f"{budget.consumed_delta:.1e}"
            ])
        widths = [60, 25, 25, 20, 25, 25]
        pdf.draw_table(header, data, widths)

    elif report_in.type == 'Query Performance':
        jobs = db.query(data_models.Job).filter(data_models.Job.dataset_id.in_(report_in.dataset_ids)).order_by(data_models.Job.created_at.desc()).all()
        if not jobs:
            raise HTTPException(status_code=404, detail="No job data found for the selected datasets.")

        pdf.section_title("Query Performance Analysis")
        pdf.section_explanation(
            "This report details all queries run against the selected datasets. It includes the privacy parameters used (ε and δ) "
            "and the final status of each job. This is useful for auditing query history and identifying failures."
        )
        
        total_queries = len(jobs)
        failed_queries = len([j for j in jobs if j.status == 'Failed'])
        success_rate = ((total_queries - failed_queries) / total_queries * 100) if total_queries > 0 else 0
        
        pdf.set_font('DejaVu', 'B', 10)
        pdf.cell(0, 8, f"Summary: {total_queries} queries executed with a {success_rate:.1f}% success rate.", 0, 1)
        pdf.ln(5)

        header = ["Job ID", "Status", "Query", "Epsilon (ε)", "Delta (δ)", "Timestamp"]
        data = [
            [j.id, j.status, j.query_type, f"{j.epsilon:.2f}", f"{j.delta:.1e}", j.created_at.strftime("%Y-%m-%d %H:%M")]
            for j in jobs
        ]
        widths = [15, 20, 75, 20, 20, 30]
        pdf.draw_table(header, data, widths)

    elif report_in.type == 'Mechanism Usage Summary':
        jobs = db.query(data_models.Job).filter(data_models.Job.dataset_id.in_(report_in.dataset_ids)).all()
        if not jobs:
            raise HTTPException(status_code=404, detail="No job data found for mechanism analysis.")
            
        mechanism_data = [j.mechanism for j in jobs if j.mechanism]
        if not mechanism_data:
            raise HTTPException(status_code=404, detail="No jobs with mechanism information found.")
        
        mechanism_counts = pd.Series(mechanism_data).value_counts().reset_index()
        mechanism_counts.columns = ['Mechanism', 'Count']
        
        pdf.section_title("Mechanism Usage Summary")
        pdf.section_explanation(
            "This report summarizes the frequency of each differential privacy mechanism (e.g., Laplace, Gaussian) "
            "used across all queries for the selected datasets. This provides insight into which privacy strategies are most commonly applied."
        )

        header = ["Mechanism", "Usage Count"]
        data = mechanism_counts.values.tolist()
        widths = [90, 90]
        pdf.draw_table(header, data, widths)
        
    else:
        raise HTTPException(status_code=400, detail="Invalid report type specified.")

    # --- Save the PDF to file ---
    pdf.output(file_path)

    # --- Database entry logic ---
    file_size_kb = os.path.getsize(file_path) / 1024
    db_report = data_models.Report(
        name=report_in.name,
        type=report_in.type,
        file_path=file_path,
        size_kb=round(file_size_kb, 2)
    )
    db.add(db_report)
    db.commit()
    db.refresh(db_report)

    return db_report


@router.get("/{report_id}/download")
def download_report(report_id: int, db: Session = Depends(get_db)):
    report = db.query(data_models.Report).filter(data_models.Report.id == report_id).first()
    if not report or not os.path.exists(report.file_path):
        raise HTTPException(status_code=404, detail="Report file not found.")
        
    return FileResponse(path=report.file_path, filename=os.path.basename(report.file_path), media_type='application/pdf')